#!/bin/bash
# WARNING: this script will destroy data on the selected disk.
# This script can be run by executing the following:
#   curl -sL https://git.io/fhiYQ | bash
set -uo pipefail
trap 's=$?; echo "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $s' ERR

REPO_URL="https://github.com/osafi/aur/releases/download/repository"
MIRRORLIST_URL="https://www.archlinux.org/mirrorlist/?country=US&protocol=https&use_mirror_status=on"

pacman -Sy --noconfirm archlinux-keyring pacman-contrib

echo "Updating mirror list"
curl -s "$MIRRORLIST_URL" | \
    sed -e 's/^#Server/Server/' -e '/^#/d' | \
    rankmirrors -n 5 - > /etc/pacman.d/mirrorlist

### Get infomation from user ###
hostname=$(dialog --stdout --inputbox "Enter hostname" 0 0) || exit 1
clear
: ${hostname:?"hostname cannot be empty"}

user=$(dialog --stdout --inputbox "Enter admin username" 0 0) || exit 1
clear
: ${user:?"user cannot be empty"}

full_name=$(dialog --stdout --inputbox "Enter admin full name" 0 0) || exit 1
clear
: ${full_name:?"full name cannot be empty"}

password=$(dialog --stdout --passwordbox "Enter admin password" 0 0) || exit 1
clear
: ${password:?"password cannot be empty"}
password2=$(dialog --stdout --passwordbox "Enter admin password again" 0 0) || exit 1
clear
[[ "$password" == "$password2" ]] || ( echo "Passwords did not match"; exit 1; )

devicelist=$(lsblk -dplnx size -o name,size | grep -Ev "boot|rpmb|loop" | tac)
device=$(dialog --stdout --menu "Select installtion disk" 0 0 0 ${devicelist}) || exit 1
clear

### Set up logging ###
exec 1> >(tee "stdout.log")
exec 2> >(tee "stderr.log")

timedatectl set-ntp true

### Setup the disk and partitions ###
boot_start=1
boot_end=$(( 1024 + 1 ))

swap_size=$(free --mebi | awk '/Mem:/ {print $2}')
swap_start=$boot_end
swap_end=$(( $swap_start + $swap_size + 1 ))

parted --script "${device}" -- mklabel gpt \
  mkpart ESP fat32 ${boot_start}MiB ${boot_end}MiB \
  set 1 boot on \
  mkpart primary linux-swap ${swap_start}MiB ${swap_end}MiB \
  mkpart primary ext4 ${swap_end}MiB 100%

# Simple globbing was not enough as on one device I needed to match /dev/mmcblk0p1 
# but not /dev/mmcblk0boot1 while being able to match /dev/sda1 on other devices.
part_boot="$(ls ${device}* | grep -E "^${device}p?1$")"
part_swap="$(ls ${device}* | grep -E "^${device}p?2$")"
part_root="$(ls ${device}* | grep -E "^${device}p?3$")"

wipefs "${part_boot}"
wipefs "${part_swap}"
wipefs "${part_root}"

mkfs.vfat -F32 "${part_boot}"
mkswap "${part_swap}"
mkfs.f2fs -f "${part_root}"

swapon "${part_swap}"
mount "${part_root}" /mnt
mkdir /mnt/boot
mount "${part_boot}" /mnt/boot

### Install and configure the basic system ###
cat >>/etc/pacman.conf <<EOF
[aur]
SigLevel = Optional TrustAll
Server = $REPO_URL
EOF

pacstrap /mnt osafi-dell-xps
genfstab -t PARTUUID /mnt >> /mnt/etc/fstab
echo "${hostname}" > /mnt/etc/hostname

cat >>/mnt/etc/pacman.conf <<EOF
[aur]
SigLevel = Optional TrustAll
Server = $REPO_URL
EOF

arch-chroot /mnt bootctl install

cat <<EOF > /mnt/boot/loader/loader.conf
default arch
EOF

cat <<EOF > /mnt/boot/loader/entries/arch.conf
title    Arch Linux
linux    /vmlinuz-linux
initrd   /initramfs-linux.img
options  root=PARTUUID=$(blkid -s PARTUUID -o value "$part_root") rw
EOF

cat <<EOF > /mnt/boot/loader/entries/archiso.conf
title    Arch Linux UEFI Live CD
linux    /archiso/boot/x86_64/vmlinuz
initrd   /archiso/boot/intel_ucode.img
initrd   /archiso/boot/amd_ucode.img
initrd   /archiso/boot/x86_64/archiso.img
options  archisodevice=${part_boot} archisobasedir=archiso archisolabel=ARCH_201904 copytoram
EOF

# TODO: find a way to get files without redownloading iso?
#curl -L -o /mnt/archlinux.iso https://mirrors.edge.kernel.org/archlinux/iso/2019.04.01/archlinux-2019.04.01-x86_64.iso
curl -L -o /mnt/archlinux.iso http://192.168.1.10/archlinux.iso

mkdir -p /archiso
mount -o loop /mnt/archlinux.iso /archiso
mkdir -p /mnt/boot/archiso
rsync -r --info=progress2 /archiso/arch/ /mnt/boot/archiso

umount /archiso
rm -rf /mnt/archlinux.iso

arch-chroot /mnt useradd -mU -s /bin/bash -c "$full_name" -G wheel,uucp,video,audio,storage,games,input "$user"
#TODO: arch-chroot /mnt chsh -s /bin/zsh

echo "$user:$password" | chpasswd --root /mnt
echo "root:$password" | chpasswd --root /mnt
